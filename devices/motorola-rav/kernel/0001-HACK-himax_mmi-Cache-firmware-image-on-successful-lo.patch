From b64e42461e57e9572b4ad7cf78f80d8998c03b2c Mon Sep 17 00:00:00 2001
From: Samuel Dionne-Riel <samuel@dionne-riel.com>
Date: Sat, 20 Mar 2021 17:43:08 -0400
Subject: [PATCH] HACK: himax_mmi: Cache firmware image on successful load

This is used in Mobile NixOS to allow re-using a generic system rootfs,
where the rootfs does not hold any device-specific firmware.

This is needed because this touchscreen driver is the "zero flash"
variant, where the hardware holds in RAM the firmware data, and loses
the firmware on suspend/resume cycles.

When the input device is closed, or when DRM is suspended, the touch
hardware is suspended.

This means that every time a new "consumer" for the touch panel, or that
DRM blanks/unblanks, it requires a firmware read.

Why is it not *always* re-using the cached firmware? Because this way
the installed system can use a different firmware than the stage-1
firmware, if desired. This allows fixing in stage-2 an issue first, or
testing different touch panel firmware without flashing a new boot
image.
---
 .../himax_0flash_mmi/himax_ic_incell_core.c   | 35 +++++++++++++++++++
 1 file changed, 35 insertions(+)

diff --git a/drivers/input/touchscreen/himax_0flash_mmi/himax_ic_incell_core.c b/drivers/input/touchscreen/himax_0flash_mmi/himax_ic_incell_core.c
index d167d36189d60..362a071f8ff4a 100755
--- a/drivers/input/touchscreen/himax_0flash_mmi/himax_ic_incell_core.c
+++ b/drivers/input/touchscreen/himax_0flash_mmi/himax_ic_incell_core.c
@@ -13,6 +13,11 @@
  *  GNU General Public License for more details.
  */
 
+// Enable to cache the firmware image.
+// This allows the firmware to be provided by stage-1 boot (initramfs), but not
+// be in stage-2 (actual system).
+#define HACK_WITH_CACHED_FIRMWARE
+
 #include "himax_ic_core.h"
 
 struct himax_core_command_operation *g_core_cmd_op;
@@ -36,6 +41,10 @@ EXPORT_SYMBOL(ovl_idx);
 #endif
 #endif
 
+#ifdef HACK_WITH_CACHED_FIRMWARE
+const struct firmware *cached_fw_entry = NULL;
+#endif
+
 void (*himax_mcu_cmd_struct_free)(void);
 static uint8_t *g_internal_buffer;
 
@@ -3318,8 +3327,20 @@ int himax_mcu_0f_operation_dirly(void)
 		fw_entry = &g_embedded_fw;
 		I("%s: Couldn't find userspace FW, use embedded FW(size:%zu) instead.\n", __func__, g_embedded_fw.size);
 #else
+#	ifdef HACK_WITH_CACHED_FIRMWARE
+		E("%s@%d: Failed to load firmware (%s); error code=%d...\n", __func__, __LINE__, i_CTPM_firmware_name, ret);
+		if (cached_fw_entry == NULL) {
+			E("%s@%d: Aborting, no cached firmware...\n", __func__, __LINE__);
+			return ret;
+		}
+		else {
+			E("%s@%d: Continuing with cached firmware\n", __func__, __LINE__);
+			fw_entry = cached_fw_entry;
+		}
+#	else
 		E("%s, fail in line%d error code=%d,file maybe fail\n", __func__, __LINE__, ret);
 		return ret;
+#	endif
 #endif
 	}
 
@@ -3335,8 +3356,22 @@ int himax_mcu_0f_operation_dirly(void)
 	}
 
 	g_core_fp.fp_firmware_update_0f(fw_entry);
+
+#ifdef HACK_WITH_CACHED_FIRMWARE
+	if (ret >= 0) {
+		D("%s: loaded a new firmware...", __func__);
+		if (cached_fw_entry != NULL) {
+			D("%s: releasing previously loaded firmware...", __func__);
+			// Release the previously cached firmware
+			release_firmware(cached_fw_entry);
+		}
+		// Point to the fresh hardware
+		cached_fw_entry = fw_entry;
+	}
+#else
 	if (ret >= 0)
 		release_firmware(fw_entry);
+#endif
 
 	g_f_0f_updat = 0;
 END:
-- 
2.29.2

