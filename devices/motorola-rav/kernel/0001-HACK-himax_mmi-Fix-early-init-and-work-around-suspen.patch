From 09459c84c6b26e2cbf394863cd4d57ea58034cc7 Mon Sep 17 00:00:00 2001
From: Samuel Dionne-Riel <samuel@dionne-riel.com>
Date: Sat, 20 Mar 2021 16:57:30 -0400
Subject: [PATCH] [HACK] himax_mmi: Fix early init and work around suspend
 issue

The driver seemingly (obviously) was tested only for their Android
system, where it's not expected to have more than one consumer for
touchscreen events, and where delaying work for 15 seconds in the future
wouldn't cause issues with the touch screen.

With Mobile NixOS, we have a first consumer, the splash screen, which
may close the input driver within those first fifteen seconds.

Since the driver didn't hook on the DRM events yet, the driver is not
resumed properly.

With this patch, we are **also** forcing a suspend/resume cycle when
resuming. This is because it *seems* that there is an issue where the
touchscreen is in a bad state with that much of an early setup.

Side-note: As this driver **requires** the firmware to be uploaded on
resume cycle. This is because the touchscreen has no way to store its
own firmware, and loses it on suspend!

(Uses: inx_Himax_firmware.bin)
---
 .../himax_0flash_mmi/himax_common.c           | 39 ++++---------------
 .../himax_0flash_mmi/himax_platform_QCT_SPI.c |  4 ++
 2 files changed, 12 insertions(+), 31 deletions(-)

diff --git a/drivers/input/touchscreen/himax_0flash_mmi/himax_common.c b/drivers/input/touchscreen/himax_0flash_mmi/himax_common.c
index 8c33c996e1d71..855410b0fdcc4 100644
--- a/drivers/input/touchscreen/himax_0flash_mmi/himax_common.c
+++ b/drivers/input/touchscreen/himax_0flash_mmi/himax_common.c
@@ -3325,14 +3325,10 @@ static void himax_panel_register(struct work_struct *work)
 #endif
 
 #if defined(CONFIG_DRM)
-static void himax_fb_register(struct work_struct *work)
+static void himax_fb_register(struct himax_ts_data *ts)
 {
 	int ret = 0;
 
-	struct himax_ts_data *ts = container_of(work, struct himax_ts_data, work_att.work);
-
-
-	I("%s in\n", __func__);
 	ts->fb_notif.notifier_call = drm_notifier_callback;
 	ret = msm_drm_register_client(&ts->fb_notif);
 
@@ -3340,6 +3336,7 @@ static void himax_fb_register(struct work_struct *work)
 		E("Unable to register fb_notifier: %d\n", ret);
 }
 #elif defined(CONFIG_FB)
+#error Only DRM is supported
 static void himax_fb_register(struct work_struct *work)
 {
 	int ret = 0;
@@ -3752,16 +3749,12 @@ int himax_chip_common_init(void)
 
 	ts->initialized = true;
 #if defined(CONFIG_FB) || defined(CONFIG_DRM)
-	ts->himax_att_wq = create_singlethread_workqueue("HMX_ATT_reuqest");
-
-	if (!ts->himax_att_wq) {
-		E(" allocate himax_att_wq failed\n");
-		err = -ENOMEM;
-		goto err_get_intr_bit_failed;
-	}
-
-	INIT_DELAYED_WORK(&ts->work_att, himax_fb_register);
-	queue_delayed_work(ts->himax_att_wq, &ts->work_att, msecs_to_jiffies(15000));
+	// The original driver delays this to 15 seconds in the future.
+	// It causes issues when there is a DRM suspend/resume cycle in the
+	// first 15 seconds of the kernel boot. There is, when switching from
+	// the splash screen to the recovery menu.
+	// Prefer registering instantly instead.
+	himax_fb_register(ts);
 #endif
 
 #ifdef HIMAX_CONFIG_PANEL_NOTIFICATIONS
@@ -3851,11 +3844,6 @@ int himax_chip_common_init(void)
 	destroy_workqueue(ts->himax_panel_wq);
 err_panel_notifier_reg_failed:
 #endif
-#if defined(CONFIG_FB) || defined(CONFIG_DRM)
-	cancel_delayed_work_sync(&ts->work_att);
-	destroy_workqueue(ts->himax_att_wq);
-err_get_intr_bit_failed:
-#endif
 err_input_register_device_failed:
 	input_free_device(ts->input_dev);
 err_detect_failed:
@@ -3928,17 +3916,6 @@ void himax_chip_common_deinit(void)
 #ifdef HX_SMART_WAKEUP
 	wakeup_source_trash(&ts->ts_SMWP_wake_lock);
 #endif
-#if defined(CONFIG_DRM)
-	if (msm_drm_unregister_client(&ts->fb_notif))
-		E("Error occurred while unregistering fb_notifier.\n");
-	cancel_delayed_work_sync(&ts->work_att);
-	destroy_workqueue(ts->himax_att_wq);
-#elif defined(CONFIG_FB)
-	if (fb_unregister_client(&ts->fb_notif))
-		E("Error occurred while unregistering fb_notifier.\n");
-	cancel_delayed_work_sync(&ts->work_att);
-	destroy_workqueue(ts->himax_att_wq);
-#endif
 #ifdef HIMAX_CONFIG_PANEL_NOTIFICATIONS
 	if (unregister_panel_notifier(&ts->panel_notif))
 		E("Error occurred while unregistering panel_notifier.\n");
diff --git a/drivers/input/touchscreen/himax_0flash_mmi/himax_platform_QCT_SPI.c b/drivers/input/touchscreen/himax_0flash_mmi/himax_platform_QCT_SPI.c
index 8a050873cd099..76375bc739761 100755
--- a/drivers/input/touchscreen/himax_0flash_mmi/himax_platform_QCT_SPI.c
+++ b/drivers/input/touchscreen/himax_0flash_mmi/himax_platform_QCT_SPI.c
@@ -998,6 +998,8 @@ int drm_notifier_callback(struct notifier_block *self,
 #if defined(__HIMAX_HX83102D_MOD__)
 		case MSM_DRM_BLANK_UNBLANK:
 			D("DRM_EARLY_EVENT_BLANK resume.\n");
+			D("%s@%d:%s: HACK: Forcing a suspend before a resume, as early boot timings with this driver are weird...", __FILE__, __LINE__, __func__);
+			himax_common_suspend(ts->dev);
 			himax_common_resume(ts->dev);
 			return 0;
 #endif
@@ -1009,6 +1011,8 @@ int drm_notifier_callback(struct notifier_block *self,
 		blank = evdata->data;
 		switch (*blank) {
 		case MSM_DRM_BLANK_UNBLANK:
+			D("%s@%d:%s: HACK: Forcing a suspend before a resume, as early boot timings with this driver are weird...", __FILE__, __LINE__, __func__);
+			himax_common_suspend(ts->dev);
 			himax_common_resume(ts->dev);
 			break;
 		}
-- 
2.29.2

